---
name: build

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


jobs:

  test-nixos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-21.11
      - name: Run tests in nix-shell
        run: |
          nix-shell --pure --run '
            python -m venv venv
            source venv/bin/activate
            pip install -e '.[isort,test]'
            pytest
          ' ./default.nix

  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
        constraints: ['']
        lint: ['--darker --flake8 --isort']
        include:
          - os: ubuntu-latest
            python-version: '3.7'
            constraints: '--constraint constraints-oldest.txt'
          - os: ubuntu-latest
            python-version: '3.10'
            constraints: '--constraint constraints-future.txt'
            upgrade: '--upgrade --upgrade-strategy=eager'
    env:
      RUN_MYPY_AND_PYLINT: >-
        ${{ matrix.python-version == '3.9' || matrix.python-version == '3.10' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        env:
          pip_options: ${{ matrix.upgrade }} ${{ matrix.constraints }}
        run: |
          # strict dependency resolution added in pip 20.3
          python -m pip install --upgrade 'pip>=20.3'
          pip install ${pip_options} -e '.[isort,test]'
      - name: Run Pytest without Mypy and Pylint if Python < 3.9
        if: env.RUN_MYPY_AND_PYLINT == 'false'
        run: |
          pytest ${{ matrix.lint }}
      - name: Run Pytest with Mypy and Pylint if Python >= 3.9
        if: env.RUN_MYPY_AND_PYLINT == 'true'
        shell: python
        run: |
          import sys
          from pathlib import Path
          from subprocess import run
          import toml

          data = toml.load("pyproject.toml")
          data["tool"]["darker"]["lint"] = ["pylint", "mypy"]
          Path("pyproject.toml").write_text(toml.dumps(data))
          pytest_cmd = ["pytest"] + "${{ matrix.lint }}".split()
          retval = run(pytest_cmd).returncode
          run(["git", "restore", "pyproject.toml"])
          sys.exit(retval)
      - name: Check English spelling in the code base using codespell
        run: codespell
      - name: Ensure modern Python style using pyupgrade
        # This script is written in a Linux / macos / windows portable way
        run: |
          python -c "
          from pyupgrade._main import main
          from glob import glob
          files = glob('**/*.py', recursive=True)
          main(files + ['--py37-plus'])
          "
      - name: Check dependencies for known security vulterabilities using Safety
        run: safety check
